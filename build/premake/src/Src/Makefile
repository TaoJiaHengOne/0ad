# C Console Executable Makefile autogenerated by premake
# Don't edit this file! Instead edit `premake.lua` then rerun `make`

ifndef CONFIG
  CONFIG=Debug
endif

ifeq ($(CONFIG),Debug)
  BINDIR := ../bin
  LIBDIR := ..
  OBJDIR := obj/Debug
  OUTDIR := ../bin
  CPPFLAGS := -MD -D "_CRT_SECURE_NO_DEPRECATE"
  CFLAGS += $(CPPFLAGS) -g
  CXXFLAGS := $(CFLAGS)
  LDFLAGS += -L$(BINDIR) -L$(LIBDIR)
  LIBS = -lm
  LDDEPS :=
  TARGET := premake
endif

ifeq ($(CONFIG),Release)
  BINDIR := ../bin
  LIBDIR := ..
  OBJDIR := obj/Release
  OUTDIR := ../bin
  CPPFLAGS := -MD -D "_CRT_SECURE_NO_DEPRECATE"
  CFLAGS += $(CPPFLAGS) -Os
  CXXFLAGS := $(CFLAGS)
  LDFLAGS += -L$(BINDIR) -L$(LIBDIR) -s
  LIBS = -lm
  LDDEPS :=
  TARGET := premake
endif

OBJECTS := \
	$(OBJDIR)/sharpdev.o \
	$(OBJDIR)/vs2005.o \
	$(OBJDIR)/io.o \
	$(OBJDIR)/sharpdev_cs.o \
	$(OBJDIR)/script.o \
	$(OBJDIR)/platform_posix.o \
	$(OBJDIR)/arg.o \
	$(OBJDIR)/vs6_cpp.o \
	$(OBJDIR)/util.o \
	$(OBJDIR)/vs6.o \
	$(OBJDIR)/gnu_helpers.o \
	$(OBJDIR)/os.o \
	$(OBJDIR)/vs2005_cs.o \
	$(OBJDIR)/gnu.o \
	$(OBJDIR)/gnu_cpp.o \
	$(OBJDIR)/gnu_cs.o \
	$(OBJDIR)/platform_windows.o \
	$(OBJDIR)/project.o \
	$(OBJDIR)/vs2002_cs.o \
	$(OBJDIR)/clean.o \
	$(OBJDIR)/premake.o \
	$(OBJDIR)/vs.o \
	$(OBJDIR)/path.o \
	$(OBJDIR)/vs2002.o \
	$(OBJDIR)/lauxlib.o \
	$(OBJDIR)/ldebug.o \
	$(OBJDIR)/ltablib.o \
	$(OBJDIR)/liolib.o \
	$(OBJDIR)/lstrlib.o \
	$(OBJDIR)/ldo.o \
	$(OBJDIR)/ltests.o \
	$(OBJDIR)/ldump.o \
	$(OBJDIR)/lundump.o \
	$(OBJDIR)/ldblib.o \
	$(OBJDIR)/lmem.o \
	$(OBJDIR)/lmathlib.o \
	$(OBJDIR)/lstate.o \
	$(OBJDIR)/ltm.o \
	$(OBJDIR)/lvm.o \
	$(OBJDIR)/ltable.o \
	$(OBJDIR)/llex.o \
	$(OBJDIR)/lgc.o \
	$(OBJDIR)/loadlib.o \
	$(OBJDIR)/lfunc.o \
	$(OBJDIR)/lparser.o \
	$(OBJDIR)/lopcodes.o \
	$(OBJDIR)/lbaselib.o \
	$(OBJDIR)/lzio.o \
	$(OBJDIR)/lobject.o \
	$(OBJDIR)/lstring.o \
	$(OBJDIR)/lapi.o \
	$(OBJDIR)/lcode.o \

CMD := $(subst \,\\,$(ComSpec)$(COMSPEC))
ifeq (,$(CMD))
  CMD_MKBINDIR := mkdir -p $(BINDIR)
  CMD_MKLIBDIR := mkdir -p $(LIBDIR)
  CMD_MKOUTDIR := mkdir -p $(OUTDIR)
  CMD_MKOBJDIR := mkdir -p $(OBJDIR)
else
  CMD_MKBINDIR := $(CMD) /c if not exist $(subst /,\\,$(BINDIR)) mkdir $(subst /,\\,$(BINDIR))
  CMD_MKLIBDIR := $(CMD) /c if not exist $(subst /,\\,$(LIBDIR)) mkdir $(subst /,\\,$(LIBDIR))
  CMD_MKOUTDIR := $(CMD) /c if not exist $(subst /,\\,$(OUTDIR)) mkdir $(subst /,\\,$(OUTDIR))
  CMD_MKOBJDIR := $(CMD) /c if not exist $(subst /,\\,$(OBJDIR)) mkdir $(subst /,\\,$(OBJDIR))
endif

.PHONY: clean

$(OUTDIR)/$(TARGET): $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking Premake
	-@$(CMD_MKBINDIR)
	-@$(CMD_MKLIBDIR)
	-@$(CMD_MKOUTDIR)
	@$(CC) -o $@ $(LDFLAGS) $(OBJECTS) $(RESOURCES) $(LIBS)

clean:
	@echo Cleaning Premake
	-@rm -rf $(OUTDIR)/$(TARGET) $(OBJDIR)

$(OBJDIR)/sharpdev.o: sharpdev.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs2005.o: vs2005.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/io.o: io.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/sharpdev_cs.o: sharpdev_cs.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/script.o: script.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/platform_posix.o: platform_posix.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/arg.o: arg.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs6_cpp.o: vs6_cpp.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/util.o: util.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs6.o: vs6.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/gnu_helpers.o: gnu_helpers.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/os.o: os.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs2005_cs.o: vs2005_cs.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/gnu.o: gnu.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/gnu_cpp.o: gnu_cpp.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/gnu_cs.o: gnu_cs.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/platform_windows.o: platform_windows.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/project.o: project.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs2002_cs.o: vs2002_cs.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/clean.o: clean.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/premake.o: premake.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs.o: vs.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/path.o: path.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/vs2002.o: vs2002.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lauxlib.o: Lua/lauxlib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ldebug.o: Lua/ldebug.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ltablib.o: Lua/ltablib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/liolib.o: Lua/liolib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lstrlib.o: Lua/lstrlib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ldo.o: Lua/ldo.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ltests.o: Lua/ltests.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ldump.o: Lua/ldump.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lundump.o: Lua/lundump.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ldblib.o: Lua/ldblib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lmem.o: Lua/lmem.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lmathlib.o: Lua/lmathlib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lstate.o: Lua/lstate.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ltm.o: Lua/ltm.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lvm.o: Lua/lvm.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/ltable.o: Lua/ltable.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/llex.o: Lua/llex.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lgc.o: Lua/lgc.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/loadlib.o: Lua/loadlib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lfunc.o: Lua/lfunc.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lparser.o: Lua/lparser.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lopcodes.o: Lua/lopcodes.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lbaselib.o: Lua/lbaselib.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lzio.o: Lua/lzio.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lobject.o: Lua/lobject.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lstring.o: Lua/lstring.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lapi.o: Lua/lapi.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

$(OBJDIR)/lcode.o: Lua/lcode.c
	-@$(CMD_MKOBJDIR)
	@echo $(notdir $<)
	@$(CC) $(CFLAGS) -o $@ -c $<

-include $(OBJECTS:%.o=%.d)

